{"version":3,"sources":["scripts/views/index.js","scripts/reducers/data.js","scripts/reducers/index.js","scripts/store.js","scripts/index.js","App.js","serviceWorker.js","index.js","utils/lazyload.js"],"names":["MainLayout","history","this","props","location","className","path","exact","render","to","component","LazyLoad","Component","childContextTypes","PropTypes","object","defaultState","immutable","fromJS","banner","count","goodList","goodType","searchList","reducers","combineReducers","data","state","action","console","log","type","update","x","payload","set","toJS","reverse","store","createStore","applyMiddleware","thunk","promise","MainRouter","basename","App","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","loadingComponent","loader","loading","Loadable"],"mappings":"gSAcqBA,E,0LAEb,MAAO,CACHC,QAAQC,KAAKC,MAAMF,QACnBG,SAASF,KAAKC,MAAMC,Y,+BAIxB,OACI,yBAAKC,UAAU,QACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAAK,kBAAC,IAAD,CAAUC,GAAG,cAChD,kBAAC,IAAD,CAAOH,KAAK,SAASI,UAAWC,aAAS,kBAAI,kEAC7C,kBAAC,IAAD,CAAOL,KAAK,SAASI,UAAWC,aAAS,kBAAI,+EAC7C,kBAAC,IAAD,CAAOL,KAAK,UAAUI,UAAWC,aAAS,kBAAI,gFAC9C,kBAAC,IAAD,CAAOL,KAAK,QAAQI,UAAWC,aAAS,kBAAI,yEAC5C,kBAAC,IAAD,CAAOL,KAAK,QAAQI,UAAWC,aAAS,kBAAI,+EAC5C,kBAAC,IAAD,CAAOL,KAAK,kBAAkBI,UAAWC,aAAS,kBAAI,8EACtD,kBAAC,IAAD,CAAOH,OAAQ,kBAAK,kBAAC,IAAD,CAAUC,GAAG,oB,GAlBbG,aAyBxCZ,EAAWa,kBAAkB,CACzBZ,QAAQa,IAAUC,OAClBX,SAASU,IAAUC,Q,6CCtCjBC,E,MAAeC,QAAUC,OAAO,CAClCC,OAAO,GACPC,MAAM,KACNC,SAAS,GACTC,SAAS,GACTC,WAAW,KCFFC,EAAWC,0BAAgB,CACpCC,KDIgB,WAA8B,IAA7BC,EAA4B,uDAAtBX,EAAaY,EAAS,uCAE7C,OADAC,QAAQC,IAAIF,GACLA,EAAOG,MAEV,IAAK,cACL,OAAOJ,EAAMK,OAAO,SAAQ,SAAAC,GAAC,OAAEA,EAAEL,EAAOM,WAGxC,IAAK,YACL,OAAOP,EAAMQ,IAAI,SAASP,EAAOM,SAGjC,IAAK,cACL,OAAOP,EAAMQ,IAAI,WAAWP,EAAOM,SAGnC,IAAK,cACL,OAAOP,EAAMQ,IAAI,WAAWP,EAAOM,SAGnC,IAAK,wBAEL,IAAIb,EAASM,EAAMS,OAAOf,SAE1B,OADAA,EAASgB,UACFV,EAAMQ,IAAI,WAAWd,GAG5B,IAAK,gBACL,OAAOM,EAAMQ,IAAI,aAAaP,EAAOM,SAGrC,IAAK,0BAEL,OAAOP,EAAMQ,IAAI,aAAaR,EAAMS,OAAOb,WAAWc,WAGtD,QACA,OAAOV,MEzCAW,EADFC,YAAYf,EAASgB,YAAgBC,IAAMC,M,QCM1CC,EAAd,iLAEQ,OACI,kBAAC,IAAD,CAAUL,MAAOA,GACjB,kBAAC,IAAD,CACIM,SAAS,IAET,kBAAC,IAAD,CAAOlC,UAAWV,UAPlC,GAAiCY,aCElBiC,MARf,WACE,OACE,yBAAKxC,UAAU,OACX,kBAAC,EAAD,QCGYyC,QACW,cAA7BC,OAAO3C,SAAS4C,UAEe,UAA7BD,OAAO3C,SAAS4C,UAEhBD,OAAO3C,SAAS4C,SAASC,MACvB,2D,MCPLC,IAAS1C,OAAO,kBAAC,EAAD,MAAS2C,SAASC,eAAe,SDwH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,gBCnHnB7B,QAAQC,IAAI,S,+BChBZ,qCAMM6B,EAAmB,WAIrB,OAAQ,yCAKG,aAACC,GAAmC,IAA5BC,EAA2B,uDAAnBF,EAC3B,OAAOG,IAAS,CACZF,SACAC,e","file":"static/js/main.039c0d21.chunk.js","sourcesContent":["import React, {Component} from \"react\"\r\n\r\nimport {\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n} from \"react-router-dom\"\r\n\r\nimport LazyLoad from \"&/lazyload\"\r\nimport PropTypes from \"prop-types\"\r\n// import Guide from \"./guide\";\r\n// import Login from \"./login\";\r\n\r\n// 所有的路由  在这里配置 \r\nexport default class MainLayout extends Component{\r\n    getChildContext(){\r\n        return {\r\n            history:this.props.history,\r\n            location:this.props.location\r\n        }\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"main\">\r\n                <Switch>\r\n                    <Route path=\"/\" exact render={()=>(<Redirect to=\"/guide\" /> )}  />\r\n                    <Route path=\"/guide\" component={LazyLoad(()=>import(\"./guide\"))} />\r\n                    <Route path=\"/login\" component={LazyLoad(()=>import(\"./login\"))} />\r\n                    <Route path=\"/search\" component={LazyLoad(()=>import(\"./search\"))} />\r\n                    <Route path=\"/main\" component={LazyLoad(()=>import(\"./main\"))} />\r\n                    <Route path=\"/scan\" component={LazyLoad(()=>import(\"./scan\"))} />\r\n                    <Route path=\"/detail/:goodId\" component={LazyLoad(()=>import(\"./detail\"))} />\r\n                    <Route render={()=>(<Redirect to=\"/guide\" /> )} />\r\n                </Switch>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nMainLayout.childContextTypes={\r\n    history:PropTypes.object,\r\n    location:PropTypes.object\r\n}\r\n","\r\nimport immutable from \"immutable\"\r\n\r\nconst defaultState = immutable.fromJS({\r\n    banner:[],\r\n    count:2020,\r\n    goodList:[],\r\n    goodType:[],\r\n    searchList:[]\r\n})\r\n\r\nexport const data = (state=defaultState,action)=>{\r\n    console.log(action)\r\n    switch(action.type){\r\n\r\n        case \"changeCount\":\r\n        return state.update(\"count\",x=>x+action.payload);\r\n        break;\r\n        \r\n        case \"getBanner\":\r\n        return state.set(\"banner\",action.payload);\r\n        break;\r\n        \r\n        case \"getGoodList\":\r\n        return state.set(\"goodList\",action.payload);\r\n        break;\r\n\r\n        case \"getGoodType\":\r\n        return state.set(\"goodType\",action.payload);\r\n        break;    \r\n\r\n        case \"changeGoodListReverse\":\r\n        // return state.update(\"goodList\",x=>x.reverse())\r\n        var goodList=state.toJS().goodList;\r\n        goodList.reverse();\r\n        return state.set(\"goodList\",goodList);\r\n        break;\r\n\r\n        case \"getSearchList\":\r\n        return state.set(\"searchList\",action.payload);\r\n        break;\r\n\r\n        case \"changeSearchListReverse\":\r\n       \r\n        return state.set(\"searchList\",state.toJS().searchList.reverse());\r\n        break;\r\n\r\n        default:\r\n        return state;\r\n        break;\r\n    }\r\n}","\r\n\r\nimport {combineReducers} from \"redux-immutable\"\r\nimport { data } from \"./data\";\r\n \r\n\r\nexport const reducers = combineReducers({\r\n    data:data\r\n})","\r\nimport {createStore,applyMiddleware} from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport promise from \"redux-promise\"\r\nimport {reducers} from \"./reducers\"\r\n\r\nconst store =createStore(reducers,applyMiddleware(thunk,promise));\r\nexport default store;","\r\nimport React, {Component} from \"react\";\r\n\r\nimport {\r\n    HashRouter as Hash,\r\n    Route,\r\n    Switch\r\n} from \"react-router-dom\";\r\n\r\nimport MainLayout from \"./views\"\r\nimport store from \"./store\";\r\nimport {Provider} from \"react-redux\"\r\nexport  class MainRouter extends Component{\r\n    render(){\r\n        return (\r\n            <Provider store={store}>\r\n            <Hash\r\n                basename=\"\"\r\n            >\r\n                <Route component={MainLayout} ></Route>\r\n            </Hash>\r\n            </Provider>\r\n        )\r\n    }\r\n}\r\n\r\n// export function MainRouter(){\r\n//     return (\r\n//         <Hash\r\n//             basename=\"\"\r\n//         >\r\n//             <Route component={MainLayout} ></Route>\r\n//         </Hash>\r\n//     )\r\n// }\r\n\r\n\r\n\r\n","import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\nimport {MainRouter} from \"~\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <MainRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"@/styles/index.scss\"; //引入  公共主样式\n\n//import \"~/immutable\";\n//  import \"~/react-redux\";\n// import \"~/redux\";\n ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconsole.log(\"this\")\n","\r\n\r\n// 路由懒加载 \r\nimport React from \"react\";\r\nimport Loadable from \"react-loadable\"\r\n// import {Toast} from \"antd-mobile\"\r\n\r\n// 通用的 loading组件 \r\nconst loadingComponent = () =>{\r\n    // Toast.loading('Loading...', 1, () => {\r\n    //     console.log('Load complete !!!');\r\n    // });\r\n    return (<div>loading</div>)  \r\n}\r\n\r\n\r\n//   loading组件  通用的 如果传入 loading  有动画 \r\nexport default (loader,loading=loadingComponent)=>{\r\n    return Loadable({\r\n        loader,     // 需要懒加载的组件 \r\n        loading\r\n    })\r\n}"],"sourceRoot":""}